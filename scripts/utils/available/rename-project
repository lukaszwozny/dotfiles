#!/usr/bin/env python3
import json
import re
import os
import logging
import glob
import shutil
import argparse
from enum import Enum
import secrets



logging.basicConfig(level=logging.DEBUG)


class Changes(Enum):
    DOMAIN = "domain"
    PORT = "port"
    SQL_PORT = "sql-port"
    VUE_PORT = "vue-port"
    DJANGO_PORT = "django-port"
    PROJECT_NAME = "project-name"
    PROJECT_NAME_CAPITALIZE = "project-name-capitalize"
    DB_USER = "db-user"
    DB_PASSWORD = "db-password"
    DJANGO_SECRET = "django-secret"


g_data = {
    Changes.DOMAIN: "abc.happy.ovh",
    Changes.PORT: "8099",
}


filename = "make-config.json"

RANDOM_WORD = "XYRWDFZU"


class App:
    def __init__(self, composed) -> None:
        self.composed = composed

    def start(self):
        if self.composed:
            self._in_all_dirs()
        else:
            self._rename_project()

    def _in_all_dirs(self):
        # types = ["backend", "frontend", "docker"]
        for dir in os.listdir("."):
            if not os.path.isdir(dir):
                continue
            logging.info(f"DIR: {dir}")

            os.chdir(dir)

            self._rename_project()

            os.chdir("..")

    def _read_replace_table(self):
        if not os.path.isfile(filename):
            return False

        with open(filename) as f:
            self.make_config = json.load(f)

        return True

    def _rename_project(self):
        found = self._read_replace_table()
        if not found:
            return
        # self.changes()

        for config in self.make_config:
            if 'enabled' in config and not config['enabled']:
                continue
            if "from" in config and "to" in config:
                self._copy(config=config)
            elif "file" in config:
                self._change(config=config)

    def _copy(self, config):
        logging.debug("Coping...")
        from_file = config["from"]
        if "fromKey" in config:
            key = Changes(config["fromKey"])
            from_file = from_file.format(g_data[key])
        logging.debug(f"  from: {from_file}")

        to_file = config["to"]
        if "toKey" in config:
            key = Changes(config["toKey"])
            to_file = to_file.format(g_data[key])
        logging.debug(f"  to: {to_file}")

        shutil.copy(from_file, to_file)

    def _change(self, config):
        logging.debug(f'FILE: {config["file"]}')

        files = glob.glob(config["file"])
        for file in files:
            with open(file) as f:
                text = f.read()

            change_i = 1
            for change in config["changes"]:
                logging.debug(f"  CHANGE {change_i}")
                change_i += 1
                # Regex
                regex = change["regex"]
                # print(regex)

                replace_key = change["replaceKey"]
                replace_with = g_data[Changes(replace_key)]

                logging.debug(f"  {regex}")

                compiled = re.compile(regex)

                groups = compiled.groups
                if groups == 0:
                    raise Exception("No match!")

                result_pattern = change.get("resultPattern", None)
                if result_pattern is None:
                    if groups == 1:
                        result_pattern = r"\1{}"
                    else:
                        result_pattern = r"\1{}\2"

                text = compiled.sub(result_pattern.format(RANDOM_WORD), text)
                text = text.replace(RANDOM_WORD, replace_with)

            # Save changes into file
            with open(file, "w") as f:
                f.write(text)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-c',
        '--composed',
        help='Renaming all projects in current dir.',
        action='store_true',
    )
    args = parser.parse_args()

    value = input(f"Domain ({g_data[Changes.DOMAIN]}): ")
    if value != "":
        g_data[Changes.DOMAIN] = value
    value = input(f"Port ({g_data[Changes.PORT]}): ")
    if value != "":
        g_data[Changes.PORT] = value

    abs_path = os.getcwd()
    dir_name = abs_path.split("/")[-1]
    split = dir_name.split('-')
    if len(split) > 1:
        split = split[:-1]
    g_data[Changes.PROJECT_NAME] = '-'.join(split)
    g_data[Changes.PROJECT_NAME_CAPITALIZE] = g_data[Changes.PROJECT_NAME].replace('-', ' ').capitalize()

    port = g_data[Changes.PORT]
    g_data[Changes.VUE_PORT] = f"3{port[1:]}"
    g_data[Changes.SQL_PORT] = f"5{port[1:]}"
    g_data[Changes.DJANGO_PORT] = f"7{port[1:]}"
    g_data[Changes.DJANGO_SECRET] = secrets.token_urlsafe(50)

    # DB
    g_data[Changes.DB_USER] = g_data[Changes.PROJECT_NAME]
    g_data[Changes.DB_PASSWORD] = f'{g_data[Changes.PROJECT_NAME]}-pass'

    app = App(
        composed=args.composed,
    )
    app.start()


if __name__ == "__main__":
    main()
